#!/usr/bin/env ruby

require 'thor'

def ask_with_description(title, description, required: false, default: nil)
  description << "Default: #{default}\n" if default.present?
  say(description, :green)
  while true
    value = ask("#{title}:").presence || default
    if required && value.blank?
      puts "#{title} is required"
    else
      break
    end
  end

  puts
  value
end

def create_sts_temporary_credentials
  client = Aws::STS::Client.new
  client.get_session_token({duration_seconds: 3600}).to_h[:credentials]
end

class CLI < Thor
  option :acm_cert_arn, required: false
  option :github_organization
  option :region
  option :district_name, default: "default"
  option :create_aws_session_token, default: false, type: :boolean,
    desc: "Create a temporary AWS STS Token from the AWS credentials passed in, and barcelona will use that token to bootstrap"
  option :use_aws_cred_envars, default: false, type: :boolean,
    desc: "Use the AWS credentials set in the executor's environment variables, instead of prompting the user for them."
  desc "execute", "Run Barcelona bootstrap"

  def execute
    ENV["RAILS_ENV"] = "bootstrap"
    require File.expand_path('../../config/application', __FILE__)
    Rails.application.load_tasks

    ActiveRecord::Migration.verbose = false

    ENV["AWS_REGION"] = options.fetch(:region) do |_|
      ask_with_description("AWS Region", <<~EOS, default: 'us-east-1')
        Choose the AWS region you want to deploy Barcelona to.
      EOS
    end

    ENV["ACM_CERT_ARN"] = options.fetch(:acm_cert_arn) do |_|
      ask_with_description("ACM Certificate ARN", <<~EOS, required: false)
        Create a new certificate on Amazon Certificate Manager in the region you chose and provide its ARN.
        This is optional but we highly recommend setting up an ACM certificate.

        Without this certificate your commands will be transmitted to Barcelona using plaintext.
      EOS
    end

    ENV["GITHUB_ORGANIZATION"] = options.fetch(:github_organization) do |_|
      ask_with_description("GitHub Organization", <<~EOS, required: true)
        Provide your GitHub organization. Users who belong to this organization will have access to Barcelona API.
      EOS
    end

    if !options[:use_aws_cred_envars]
      say <<~EOS, :green
          Provide your AWS access key ID and secret access key.
          This access key will be used to bootstrap your Barcelona environment.
          The best practice is to create a new access key with admin previleges and \ 
          delete it after the bootstrap is complete.
      EOS

      ENV["AWS_ACCESS_KEY_ID"] = ask("AWS Access Key ID:")
      ENV["AWS_SECRET_ACCESS_KEY"] = ask("AWS Secret Access Key:", echo: false)
      ENV["AWS_SESSION_TOKEN"] = ask("AWS Secret Access Key:", echo: false, required: false)
    else
      say "Using the AWS Credentials set in your environment variables.", :green
    end

    if options[:create_aws_session_token]
      say "Creating temporary AWS STS token for barcelona to use.", :green
      credentials = create_sts_temporary_credentials
      ENV["AWS_ACCESS_KEY_ID"] = credentials[:access_key_id]
      ENV["AWS_SECRET_ACCESS_KEY"] = credentials[:secret_access_key]
      ENV["AWS_SESSION_TOKEN"] = credentials[:session_token]
      say "AWS STS token created. It will expire at #{credentials[:expiration]}", :green
    end

    ENV["DISTRICT_NAME"] = options[:district_name]

    Rake::Task["bcn:bootstrap"].invoke
  end

  default_task :execute
end

CLI.start(ARGV)
